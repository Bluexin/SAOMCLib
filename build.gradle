buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    // This is only here while FG is under active development
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 10, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.30"
        classpath "org.jetbrains.kotlin:kotlin-serialization:1.5.30"
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'idea'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'
apply plugin: 'kotlinx-serialization'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

group = 'com.tencao'
version = mc_version + '-' + mod_version
archivesBaseName = "saomclib"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

allprojects {
    apply plugin: 'idea'
    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.16.5'
    //mappings channel: 'snapshot', version: '20210309-1.16.5'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                saomclib.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            workingDirectory file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                saomclib.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            workingDirectory file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'com.tencao.saomclib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                saomclib.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': mod_version, 'mc_version': minecraft_version_range, 'forge_version': forge_version_range
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

// This is only here while FG is under active development
configurations.all  {
    resolutionStrategy {
        cacheDynamicVersionsFor 10, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

configurations {
    shade
    compile.extendsFrom shade
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.bluexin.be/repository/releases/"
    }
    maven {
        url "https://maven.bluexin.be/repository/snapshots/"
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    implementation 'thedarkcolour:kotlinforforge:1.17.0'
}

javadoc {
    source = [sourceSets.main.allJava, sourceSets.api.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF/MANIFEST.MF'
        }
    }

    manifest.attributes([
                "Specification-Title"     : "saomclib",
                "Specification-Vendor"    : "Tencao, Bluexin",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Tencao, Bluexin",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])

    finalizedBy 'reobfJar'

}

tasks.withType(Copy) {
    includeEmptyDirs = false
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task deobfJar(type: Jar) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

task reobf {
    dependsOn 'reobfJar'
}

java {
    withSourcesJar()
}

jar.finalizedBy('reobfJar')
publish.dependsOn('reobfJar', 'deobfJar', 'sourcesJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        def remote = System.getenv('REPO_PWD') != null
        maven {
            def remoteURL = "https://maven.tencao.com/repository/" + (((String) project.version).contains("SNAPSHOT")? "snapshots": "repo-for-releases")
            def localURL = "file://${buildDir}/repo"
            url = remote? remoteURL: localURL
            if (remote) {
                credentials(PasswordCredentials) {
                    username = 'CI'
                    password = System.getenv('REPO_PWD')
                }
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}

tasks.withType(JavaCompile) {
    options.incremental = false
}