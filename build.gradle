buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    // This is only here while FG is under active development
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 10, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.+"
    }
}
plugins {
    id 'java'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

version = mc_version + '-' + mod_version
group = "com.tencao"
archivesBaseName = "saomclib"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20180713-1.12'
    mappings channel: 'snapshot', version: '20171007-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')


    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                saomclib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                saomclib {
                    source sourceSets.main
                }
            }
        }
    }

}

// This is only here while FG is under active development
configurations.configureEach {
    resolutionStrategy {
        cacheDynamicVersionsFor 10, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

configurations {
    shade
    compile.extendsFrom shade
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

repositories {
    mavenCentral()
    maven {
        url "https://maven.bluexin.be/repository/releases/"
    }
    maven {
        url "https://maven.bluexin.be/repository/snapshots/"
    }
    maven {
        url "https://maven.shadowfacts.net/"
    }
    maven {
        url "https://maven.tencao.com/repository/releases/"
    }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2854'

    compile "net.shadowfacts:Forgelin:${forgelin_version}"
}

javadoc {
    source = [sourceSets.main.allJava, sourceSets.api.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF/MANIFEST.MF'
        }
    }

    manifest.attributes([
            "Specification-Title"     : "saomclib",
            "Specification-Vendor"    : "Tencao, Bluexin",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.version,
            "Implementation-Vendor"   : "Tencao, Bluexin",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])

    finalizedBy 'reobfJar'

}


tasks.withType(Copy).configureEach {
    includeEmptyDirs = false
}

tasks.register('sourcesJar', Jar.class) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

tasks.register('deobfJar', Jar.class) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

tasks.register('reobf') {
    dependsOn 'reobfJar'
}

java {
    withSourcesJar()
}

jar.finalizedBy('reobfJar')
publish.dependsOn('reobfJar', 'deobfJar', 'sourcesJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        def remote = System.getenv('REPO_PWD') != null
        maven {
            def remoteURL = "https://maven.tencao.com/repository/" + (((String) project.version).contains("SNAPSHOT")? "snapshots": "repo-for-releases")
            def localURL = "file://${buildDir}/repo"
            url = remote? remoteURL: localURL
            if (remote) {
                credentials(PasswordCredentials) {
                    username = 'CI'
                    password = System.getenv('REPO_PWD')
                }
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}

tasks.withType(JavaCompile).configureEach {
    options.incremental = false
}